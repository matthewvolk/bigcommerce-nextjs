import type {GetServerSideProps, NextPage} from 'next';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';

interface Product {
  cursor: string;
  node: {
    entityId: number;
    name: string;
    path: string;
    brand: string;
    description: string;
    plainTextDescription: string;
    prices: {
      price: {
        value: number;
        currencyCode: string;
      };
      salePrice: number;
      retailPrice: number;
    };
    images: {
      edges: [];
    };
    variants: {};
    productOptions: {};
  };
}

interface ProductProps {
  products: Product[];
}

const Home: NextPage<ProductProps> = props => {
  return (
    <div className="container py-4">
      <Head>
        <title>BigCommerce + Next.js</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="pb-3 mb-4 border-bottom">
        <Link href="/" passHref>
          <a className="d-flex align-items-center text-dark">
            <span className="fs-5 fw-bolder">Home</span>
          </a>
        </Link>
      </header>

      <div className="p-5 mb-4 bg-light rounded-3">
        <div className="container-fluid py-5">
          <h1 className="display-5 fw-bold">BigCommerce + Next.js</h1>
          <p className="col-md-8 fs-4">
            This is a server-side rendered example of Next.js using BigCommerce to provide
            e-commerce functionality.
          </p>
          <Link href="#products" passHref>
            <a className="btn btn-dark btn-lg" type="button">
              View Products
            </a>
          </Link>
        </div>
      </div>

      <div className="row align-items-md-stretch">
        <div className="col-md-6">
          <div className="h-100 p-5 text-white bg-dark rounded-3">
            <h2>Don&apos;t Buy Things!</h2>
            <p>
              This is just an example website for testing. Do not buy anything you see on this
              website.
            </p>
            <Link href="#products" passHref>
              <a className="btn btn-light" type="button">
                View Products
              </a>
            </Link>
          </div>
        </div>
        <div className="col-md-6">
          <div className="h-100 p-5 bg-light rounded-3">
            <h2>Don&apos;t Buy Things!</h2>
            <p>
              AGAIN, this is just an example website for testing. Do not buy anything you see on
              this website.
            </p>
            <Link href="#products" passHref>
              <a className="btn btn-dark" type="button">
                View Products
              </a>
            </Link>
          </div>
        </div>
      </div>

      <div className="container my-5">
        <h2 className="display-5 fw-bold border-bottom" id="products">
          Products
        </h2>
        <div className="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 mt-5">
          {props.products.map(product => {
            return (
              <div key={product.node.entityId} className="col">
                <div className="card">
                  <div className="card-img-top">
                    <img
                      src={product.node.images.edges[0].node.urlOriginal}
                      alt="Product Image"
                      className="card-img-top"
                    />
                  </div>
                  <div className="card-body">
                    <h5 className="cart-title">{product.node.name}</h5>
                    <h6 className="card-subtitle mb-2 text-muted">
                      ${product.node.prices.price.value.toFixed(2)}
                    </h6>
                    <p className="card-text">{product.node.plainTextDescription}</p>
                    <Link href="/" passHref>
                      <a style={{cursor: 'not-allowed'}} className="btn btn-dark">
                        Add to Cart
                      </a>
                    </Link>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <footer className="pt-3 mt-4 text-muted d-flex justify-content-between border-top">
        <div>
          Created by{' '}
          <a
            className="text-muted"
            href="https://github.com/matthewvolk"
            rel="noreferrer"
            target="_blank"
          >
            Matthew Volk
          </a>
        </div>
        <div>&copy; 2021</div>
      </footer>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async context => {
  const res = await fetch('https://store-unzvctoo8r-776474.mybigcommerce.com/graphql', {
    method: 'POST',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${process.env.BIGCOMMERCE_STOREFRONT_API_TOKEN}`,
    },
    body: JSON.stringify({
      query: `query getAllProducts(
        $hasLocale: Boolean = false
        $locale: String = "null"
        $entityIds: [Int!]
        $first: Int = 10
        $products: Boolean = true
        $featuredProducts: Boolean = false
        $bestSellingProducts: Boolean = false
        $newestProducts: Boolean = false
      ) {
        site {
          products(first: $first, entityIds: $entityIds) @include(if: $products) {
            ...productConnnection
          }
          featuredProducts(first: $first) @include(if: $featuredProducts) {
            ...productConnnection
          }
          bestSellingProducts(first: $first) @include(if: $bestSellingProducts) {
            ...productConnnection
          }
          newestProducts(first: $first) @include(if: $newestProducts) {
            ...productConnnection
          }
        }
      }
      
      fragment productConnnection on ProductConnection {
        pageInfo {
          startCursor
          endCursor
        }
        edges {
          cursor
          node {
            ...productInfo
          }
        }
      }
      
      fragment productInfo on Product {
        entityId
        name
        path
        brand {
          entityId
        }
        description
        plainTextDescription
        prices {
          ...productPrices
        }
        images {
          edges {
            node {
              urlOriginal
              altText
              isDefault
            }
          }
        }
        variants {
          edges {
            node {
              entityId
              defaultImage {
                urlOriginal
                altText
                isDefault
              }
            }
          }
        }
        productOptions {
          edges {
            node {
              __typename
              entityId
              displayName
              ...multipleChoiceOption
            }
          }
        }
        localeMeta: metafields(namespace: $locale, keys: ["name", "description"])
          @include(if: $hasLocale) {
          edges {
            node {
              key
              value
            }
          }
        }
      }
      
      fragment multipleChoiceOption on MultipleChoiceOption {
        values {
          edges {
            node {
              label
              ...swatchOption
            }
          }
        }
      }
      
      fragment productPrices on Prices {
        price {
          value
          currencyCode
        }
        salePrice {
          value
          currencyCode
        }
        retailPrice {
          value
          currencyCode
        }
      }
      
      fragment swatchOption on SwatchOptionValue {
        isDefault
        hexColors
      }
    `,
    }),
  });
  const data = await res.json();
  const products = data.data.site.products.edges;
  return {
    props: {
      products,
    },
  };
};

export default Home;
